// <auto-generated />
using System;
using HeyCurator_MVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HeyCurator_MVC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210318201750_CuratorSpace Redefined New Model")]
    partial class CuratorSpaceRedefinedNewModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HeyCurator_MVC.AnonymousQuestionBoard.AnonymousComment", b =>
                {
                    b.Property<Guid>("AnonymousCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnonymousQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnonymousCommentId");

                    b.HasIndex("AnonymousQuestionId");

                    b.ToTable("AnonymousComments");
                });

            modelBuilder.Entity("HeyCurator_MVC.AnonymousQuestionBoard.AnonymousQuestion", b =>
                {
                    b.Property<Guid>("AnonymousQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionHeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnonymousQuestionId");

                    b.ToTable("AnonymousQuestions");
                });

            modelBuilder.Entity("HeyCurator_MVC.MessageService.HeyCuratorMail", b =>
                {
                    b.Property<int>("HeyCuratorMailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateMessageSent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasBeenRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("RecipientId")
                        .HasColumnType("int");

                    b.Property<int?>("ResponseId")
                        .HasColumnType("int");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HeyCuratorMailId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("ResponseId");

                    b.HasIndex("SenderId");

                    b.ToTable("HeyCuratorMails");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ChatMessage", b =>
                {
                    b.Property<int>("ChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Recipient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sender")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatMessageId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.CuratorRole", b =>
                {
                    b.Property<int>("CuratorRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameOfRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CuratorRoleId");

                    b.ToTable("CuratorRoles");

                    b.HasData(
                        new
                        {
                            CuratorRoleId = 1,
                            NameOfRole = "Admin"
                        },
                        new
                        {
                            CuratorRoleId = 2,
                            NameOfRole = "Employee"
                        });
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.CuratorSpace", b =>
                {
                    b.Property<int>("CuratorRoleId")
                        .HasColumnType("int");

                    b.Property<int>("ExhibitSpaceId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("CuratorRoleId", "ExhibitSpaceId");

                    b.HasIndex("ExhibitSpaceId");

                    b.HasIndex("ItemId");

                    b.ToTable("CuratorSpaces");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("RecordId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.EmployeeRoles", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("CuratorRoleId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "CuratorRoleId");

                    b.HasIndex("CuratorRoleId");

                    b.ToTable("EmployeeRoles");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Exhibit", b =>
                {
                    b.Property<int>("ExhibitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExhibitSpaceId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("LocationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExhibitId");

                    b.HasIndex("ExhibitSpaceId");

                    b.HasIndex("ItemId");

                    b.ToTable("Exhibits");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ExhibitItemInstance", b =>
                {
                    b.Property<int>("ExhibitId")
                        .HasColumnType("int");

                    b.Property<int>("ItemInstanceId")
                        .HasColumnType("int");

                    b.HasKey("ExhibitId", "ItemInstanceId");

                    b.HasIndex("ItemInstanceId");

                    b.ToTable("ExhibitItemInstances");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ExhibitSpace", b =>
                {
                    b.Property<int>("ExhibitSpaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExhibitSpaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("LocationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExhibitSpaceId");

                    b.HasIndex("ItemId");

                    b.ToTable("ExhibitSpaces");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ExpiredUpdateItem", b =>
                {
                    b.Property<int>("ExpiredUpdateItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllCuratorExpiration")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("ExpiredUpdateItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ExpiredUpdateItems");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.InventoryControlModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllowUpdateLapseInDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfMostRecentInventoryCount")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemInstanceId")
                        .HasColumnType("int");

                    b.Property<float>("MinimumUnitCount")
                        .HasColumnType("real");

                    b.Property<int>("MostRecentInventoryCount")
                        .HasColumnType("int");

                    b.Property<float>("RecommendedUnitCount")
                        .HasColumnType("real");

                    b.Property<int>("ScheduledUpdatePeriodInDays")
                        .HasColumnType("int");

                    b.Property<string>("UnitMeasurement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemInstanceId")
                        .IsUnique();

                    b.ToTable("InventoryControlModels");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateNotifyCurators")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfLastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DaysBeforeNotifyAllCurators")
                        .HasColumnType("int");

                    b.Property<int>("DaysBetweenUpdates")
                        .HasColumnType("int");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordedStorageAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateByDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ItemInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemInstanceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemInstances");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.LowCountItem", b =>
                {
                    b.Property<int>("ExpiredUpdateItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountInReserve")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OrderHasBeenMade")
                        .HasColumnType("bit");

                    b.Property<bool>("PurchaseNotificationMade")
                        .HasColumnType("bit");

                    b.HasKey("ExpiredUpdateItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("LowCountItems");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountInOrder")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("PurchaserNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ItemId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.PurchaserNotification", b =>
                {
                    b.Property<int>("PurchaserNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AmountRequested")
                        .HasColumnType("int");

                    b.Property<string>("CuratorNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFullFilled")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderRefId")
                        .HasColumnType("int");

                    b.Property<int>("OrderUrgency")
                        .HasColumnType("int");

                    b.Property<string>("PurchaserNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("PurchaserNotificationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ItemId");

                    b.ToTable("PurchaserNotifications");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Record", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CuratorVerified")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("FirstVerifierId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryControlModelID")
                        .HasColumnType("int");

                    b.Property<bool>("IsChallenged")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("RecordNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordedCount")
                        .HasColumnType("int");

                    b.Property<int?>("SecondVefifierId")
                        .HasColumnType("int");

                    b.Property<bool>("SecondaryVefified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("RecordId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FirstVerifierId");

                    b.HasIndex("InventoryControlModelID");

                    b.HasIndex("ItemId");

                    b.HasIndex("SecondVefifierId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Storage", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestrictedAccessRules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StorageId");

                    b.ToTable("Storages");

                    b.HasData(
                        new
                        {
                            StorageId = 1,
                            AccessLevel = 7,
                            Name = "Not Declared",
                            StorageType = "Not Declared"
                        });
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.StorageItemInstance", b =>
                {
                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<int>("ItemInstanceId")
                        .HasColumnType("int");

                    b.HasKey("StorageId", "ItemInstanceId");

                    b.HasIndex("ItemInstanceId");

                    b.ToTable("StorageItemInstances");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "d78d3637-a624-4188-adfc-f7a8019bf524",
                            ConcurrencyStamp = "09fbb002-56b1-48a1-9e74-85633902acf0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8be5a650-6de9-4491-856f-c0988614e3af",
                            ConcurrencyStamp = "d073ecec-ac3a-4b9b-bc61-d833b017fdb1",
                            Name = "Curator",
                            NormalizedName = "CURATOR"
                        },
                        new
                        {
                            Id = "a084c5a0-d102-4d6b-90f0-4304d2773b2a",
                            ConcurrencyStamp = "f3e3cf9b-a218-4530-b91c-a13a71e99a02",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HeyCurator_MVC.AnonymousQuestionBoard.AnonymousComment", b =>
                {
                    b.HasOne("HeyCurator_MVC.AnonymousQuestionBoard.AnonymousQuestion", "AnonymousQuestion")
                        .WithMany("AnonymousComments")
                        .HasForeignKey("AnonymousQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeyCurator_MVC.MessageService.HeyCuratorMail", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Employee", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId");

                    b.HasOne("HeyCurator_MVC.MessageService.HeyCuratorMail", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId");

                    b.HasOne("HeyCurator_MVC.Models.Employee", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.CuratorSpace", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.CuratorRole", "CuratorRole")
                        .WithMany("CuratorSpaces")
                        .HasForeignKey("CuratorRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.ExhibitSpace", "ExhibitSpace")
                        .WithMany("CuratorSpaces")
                        .HasForeignKey("ExhibitSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.Item", null)
                        .WithMany("CuratorSpaces")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Employee", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Record", null)
                        .WithMany("Employees")
                        .HasForeignKey("RecordId");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.EmployeeRoles", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.CuratorRole", "CuratorRole")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("CuratorRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.Employee", "Employee")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Exhibit", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.ExhibitSpace", "ExhibitSpace")
                        .WithMany("Exhibits")
                        .HasForeignKey("ExhibitSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.Item", null)
                        .WithMany("Exhibits")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ExhibitItemInstance", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Exhibit", "Exhibit")
                        .WithMany("ExhibitItemInstances")
                        .HasForeignKey("ExhibitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.ItemInstance", "ItemInstance")
                        .WithMany("ExhibitItemInstances")
                        .HasForeignKey("ItemInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ExhibitSpace", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Item", null)
                        .WithMany("ExhibitSpaces")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ExpiredUpdateItem", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.InventoryControlModel", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.ItemInstance", "ItemInstance")
                        .WithOne("InventoryControlModel")
                        .HasForeignKey("HeyCurator_MVC.Models.InventoryControlModel", "ItemInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ItemInstance", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Item", "Item")
                        .WithMany("ItemInstances")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.LowCountItem", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Order", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Employee", "Purchaser")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.PurchaserNotification", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Record", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("HeyCurator_MVC.Models.Employee", "FirstVerifier")
                        .WithMany()
                        .HasForeignKey("FirstVerifierId");

                    b.HasOne("HeyCurator_MVC.Models.InventoryControlModel", "InventoryControlModel")
                        .WithMany("Records")
                        .HasForeignKey("InventoryControlModelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.Item", null)
                        .WithMany("Records")
                        .HasForeignKey("ItemId");

                    b.HasOne("HeyCurator_MVC.Models.Employee", "SecondVefifier")
                        .WithMany()
                        .HasForeignKey("SecondVefifierId");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.StorageItemInstance", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.ItemInstance", "ItemInstance")
                        .WithMany("StorageItemInstances")
                        .HasForeignKey("ItemInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.Storage", "Storage")
                        .WithMany("StorageItemInstances")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
