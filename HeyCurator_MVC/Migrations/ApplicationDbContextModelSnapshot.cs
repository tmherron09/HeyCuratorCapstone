// <auto-generated />
using System;
using HeyCurator_MVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HeyCurator_MVC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HeyCurator_MVC.MessageService.HeyCuratorMail", b =>
                {
                    b.Property<int>("HeyCuratorMailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateMessageSent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasBeenRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("RecipientId")
                        .HasColumnType("int");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HeyCuratorMailId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("HeyCuratorMails");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.CuratorRole", b =>
                {
                    b.Property<int>("CuratorRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameOfRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CuratorRoleId");

                    b.ToTable("CuratorRoles");

                    b.HasData(
                        new
                        {
                            CuratorRoleId = 1,
                            NameOfRole = "Admin"
                        },
                        new
                        {
                            CuratorRoleId = 2,
                            NameOfRole = "Employee"
                        });
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.CuratorSpace", b =>
                {
                    b.Property<int>("CuratorSpaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CuratorRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CuratorSpaceId");

                    b.HasIndex("CuratorRoleId");

                    b.HasIndex("ItemId");

                    b.ToTable("CuratorSpaces");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.EmployeeRoles", b =>
                {
                    b.Property<int>("EmployeeRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CuratorRoleId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffRoleCuratorRoleId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeRoleId");

                    b.HasIndex("CuratorRoleId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StaffRoleCuratorRoleId");

                    b.ToTable("EmployeeRoles");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Exhibit", b =>
                {
                    b.Property<int>("ExhibitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CuratorSpaceId")
                        .HasColumnType("int");

                    b.Property<int>("ExhibitSpaceId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExhibitId");

                    b.HasIndex("CuratorSpaceId");

                    b.HasIndex("ExhibitSpaceId");

                    b.HasIndex("ItemId");

                    b.ToTable("Exhibits");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ExhibitItemInStorage", b =>
                {
                    b.Property<int>("ExhibitItemInStorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExhibitId")
                        .HasColumnType("int");

                    b.Property<int>("ItemInStorageId")
                        .HasColumnType("int");

                    b.HasKey("ExhibitItemInStorageId");

                    b.HasIndex("ExhibitId");

                    b.HasIndex("ItemInStorageId");

                    b.ToTable("ExhibitItemInStorages");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ExhibitSpace", b =>
                {
                    b.Property<int>("ExhibitSpaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CuratorSpaceId")
                        .HasColumnType("int");

                    b.Property<string>("ExhibitSpaceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("ExhibitSpaceId");

                    b.HasIndex("CuratorSpaceId");

                    b.HasIndex("ItemId");

                    b.ToTable("ExhibitSpaces");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ExpiredUpdateItem", b =>
                {
                    b.Property<int>("ExpiredUpdateItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllCuratorExpiration")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("ExpiredUpdateItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ExpiredUpdateItems");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateNotifyCurators")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfLastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DaysBeforeNotifyAllCurators")
                        .HasColumnType("int");

                    b.Property<int>("DaysBetweenUpdates")
                        .HasColumnType("int");

                    b.Property<int>("MinCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordedStorageAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateByDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ItemInStorage", b =>
                {
                    b.Property<int>("ItemInStorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CuratorSpaceId")
                        .HasColumnType("int");

                    b.Property<int?>("ExhibitId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("StorageCount")
                        .HasColumnType("int");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.HasKey("ItemInStorageId");

                    b.HasIndex("CuratorSpaceId");

                    b.HasIndex("ExhibitId");

                    b.HasIndex("ItemId");

                    b.HasIndex("StorageId");

                    b.ToTable("ItemInStorages");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountInOrder")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("PurchaserNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ItemId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.PurchaserNotification", b =>
                {
                    b.Property<int>("PurchaserNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AmountRequested")
                        .HasColumnType("int");

                    b.Property<string>("CuratorNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderRefId")
                        .HasColumnType("int");

                    b.Property<int>("OrderUrgency")
                        .HasColumnType("int");

                    b.Property<string>("PurchaserNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("PurchaserNotificationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ItemId");

                    b.ToTable("PurchaserNotifications");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Record", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemInStorageId")
                        .HasColumnType("int");

                    b.Property<int>("RecordInfoId")
                        .HasColumnType("int");

                    b.Property<int>("RecordedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("RecordId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemInStorageId");

                    b.HasIndex("RecordInfoId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.RecordInfo", b =>
                {
                    b.Property<int>("RecordInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CuratorVerified")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("FirstVerifierId")
                        .HasColumnType("int");

                    b.Property<bool>("IsChallenged")
                        .HasColumnType("bit");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("RecordNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SecondVefifierId")
                        .HasColumnType("int");

                    b.Property<bool>("SecondaryVefified")
                        .HasColumnType("bit");

                    b.HasKey("RecordInfoId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FirstVerifierId");

                    b.HasIndex("SecondVefifierId");

                    b.ToTable("RecordInfo");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Storage", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<int?>("CuratorSpaceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StorageId");

                    b.HasIndex("CuratorSpaceId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.StorageCuratorSpace", b =>
                {
                    b.Property<int>("StorageCuratorSpacesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CuratorSpaceId")
                        .HasColumnType("int");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.HasKey("StorageCuratorSpacesId");

                    b.HasIndex("CuratorSpaceId");

                    b.HasIndex("StorageId");

                    b.ToTable("StorageCuratorSpaces");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c4724412-4815-484c-8f9c-35aeea1f9fa0",
                            ConcurrencyStamp = "738b2e3a-b150-41b1-aafc-c20e1d48e17b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ebe857d9-5eb1-441a-bf3d-5ce4e1a1f44c",
                            ConcurrencyStamp = "ee0333d5-934f-48fc-85a2-da704c16ff8c",
                            Name = "Curator",
                            NormalizedName = "CURATOR"
                        },
                        new
                        {
                            Id = "75f534c2-787c-471e-9f53-9bf721d88afe",
                            ConcurrencyStamp = "f4ea9af5-4639-4dfe-9ca1-20a2d17af0c2",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "de62c94d-57ee-42c5-a3b9-b8560c0a4df8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65478f41-a364-4a4f-a1d2-07bbafca5a89",
                            Email = "Admin@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJLxTKqvmknQ/xX6lFJSEV8g622/2ffFHfwp/Xdw76NDqpW8S17TWJVjlzc/WL/oUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "696bcb52-6269-42b2-a377-942fc7c8e02d",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HeyCurator_MVC.MessageService.HeyCuratorMail", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Employee", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId");

                    b.HasOne("HeyCurator_MVC.Models.Employee", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.CuratorSpace", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.CuratorRole", "CuratorRole")
                        .WithMany()
                        .HasForeignKey("CuratorRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.Item", null)
                        .WithMany("CuratorSpaces")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.EmployeeRoles", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.CuratorRole", "CuratorRole")
                        .WithMany()
                        .HasForeignKey("CuratorRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.Employee", "Employee")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.CuratorRole", "StaffRole")
                        .WithMany()
                        .HasForeignKey("StaffRoleCuratorRoleId");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Exhibit", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.CuratorSpace", "CuratorSpace")
                        .WithMany("Exhibits")
                        .HasForeignKey("CuratorSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.ExhibitSpace", "ExhibitSpace")
                        .WithMany("Exhibits")
                        .HasForeignKey("ExhibitSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.Item", null)
                        .WithMany("Exhibits")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ExhibitItemInStorage", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Exhibit", "Exhibit")
                        .WithMany()
                        .HasForeignKey("ExhibitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.ItemInStorage", "ItemInStorage")
                        .WithMany()
                        .HasForeignKey("ItemInStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ExhibitSpace", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.CuratorSpace", "CuratorSpace")
                        .WithMany("ExhibitSpaces")
                        .HasForeignKey("CuratorSpaceId");

                    b.HasOne("HeyCurator_MVC.Models.Item", null)
                        .WithMany("ExhibitSpaces")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ExpiredUpdateItem", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.ItemInStorage", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.CuratorSpace", "CuratorSpace")
                        .WithMany("ItemsInStorage")
                        .HasForeignKey("CuratorSpaceId");

                    b.HasOne("HeyCurator_MVC.Models.Exhibit", null)
                        .WithMany("ItemInStorages")
                        .HasForeignKey("ExhibitId");

                    b.HasOne("HeyCurator_MVC.Models.Item", "Item")
                        .WithMany("ItemInStorages")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Order", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Employee", "Purchaser")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.PurchaserNotification", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Record", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Item", null)
                        .WithMany("Records")
                        .HasForeignKey("ItemId");

                    b.HasOne("HeyCurator_MVC.Models.ItemInStorage", null)
                        .WithMany("Records")
                        .HasForeignKey("ItemInStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.RecordInfo", "RecordInfo")
                        .WithMany()
                        .HasForeignKey("RecordInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.RecordInfo", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("HeyCurator_MVC.Models.Employee", "FirstVerifier")
                        .WithMany()
                        .HasForeignKey("FirstVerifierId");

                    b.HasOne("HeyCurator_MVC.Models.Employee", "SecondVefifier")
                        .WithMany()
                        .HasForeignKey("SecondVefifierId");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.Storage", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.CuratorSpace", null)
                        .WithMany("Storages")
                        .HasForeignKey("CuratorSpaceId");
                });

            modelBuilder.Entity("HeyCurator_MVC.Models.StorageCuratorSpace", b =>
                {
                    b.HasOne("HeyCurator_MVC.Models.CuratorSpace", "CuratorSpace")
                        .WithMany()
                        .HasForeignKey("CuratorSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeyCurator_MVC.Models.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
